<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lambo.mock.manage.dao.api.MockSettingMapper">
  <resultMap id="BaseResultMap" type="com.lambo.mock.manage.model.MockSetting">
    <id column="mock_id" jdbcType="VARCHAR" property="mockId" />
    <result column="mock_name" jdbcType="VARCHAR" property="mockName" />
    <result column="mock_url" jdbcType="VARCHAR" property="mockUrl" />
    <result column="mock_type" jdbcType="VARCHAR" property="mockType" />
    <result column="provider" jdbcType="VARCHAR" property="provider" />
    <result column="user" jdbcType="VARCHAR" property="user" />
    <result column="auth_method" jdbcType="VARCHAR" property="authMethod" />
    <result column="note" jdbcType="VARCHAR" property="note" />
    <result column="create_time" jdbcType="VARCHAR" property="createTime" />
    <result column="update_time" jdbcType="VARCHAR" property="updateTime" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.lambo.mock.manage.model.MockSetting">
    <result column="mock_data" jdbcType="LONGVARCHAR" property="mockData" />
    <result column="params_des" jdbcType="LONGVARCHAR" property="paramsDes" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    mock_id, mock_name, mock_url, mock_type, provider, user, auth_method, note, create_time, 
    update_time, create_user
  </sql>
  <sql id="Blob_Column_List">
    mock_data, params_des
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.lambo.mock.manage.model.MockSettingExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from mock_setting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.lambo.mock.manage.model.MockSettingExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from mock_setting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from mock_setting
    where mock_id = #{mockId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from mock_setting
    where mock_id = #{mockId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.lambo.mock.manage.model.MockSettingExample">
    delete from mock_setting
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lambo.mock.manage.model.MockSetting">
    insert into mock_setting (mock_id, mock_name, mock_url, 
      mock_type, provider, user, 
      auth_method, note, create_time, 
      update_time, create_user, mock_data, 
      params_des)
    values (#{mockId,jdbcType=VARCHAR}, #{mockName,jdbcType=VARCHAR}, #{mockUrl,jdbcType=VARCHAR}, 
      #{mockType,jdbcType=VARCHAR}, #{provider,jdbcType=VARCHAR}, #{user,jdbcType=VARCHAR}, 
      #{authMethod,jdbcType=VARCHAR}, #{note,jdbcType=VARCHAR}, #{createTime,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=VARCHAR}, #{createUser,jdbcType=VARCHAR}, #{mockData,jdbcType=LONGVARCHAR}, 
      #{paramsDes,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.lambo.mock.manage.model.MockSetting">
    insert into mock_setting
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="mockId != null">
        mock_id,
      </if>
      <if test="mockName != null">
        mock_name,
      </if>
      <if test="mockUrl != null">
        mock_url,
      </if>
      <if test="mockType != null">
        mock_type,
      </if>
      <if test="provider != null">
        provider,
      </if>
      <if test="user != null">
        user,
      </if>
      <if test="authMethod != null">
        auth_method,
      </if>
      <if test="note != null">
        note,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="mockData != null">
        mock_data,
      </if>
      <if test="paramsDes != null">
        params_des,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="mockId != null">
        #{mockId,jdbcType=VARCHAR},
      </if>
      <if test="mockName != null">
        #{mockName,jdbcType=VARCHAR},
      </if>
      <if test="mockUrl != null">
        #{mockUrl,jdbcType=VARCHAR},
      </if>
      <if test="mockType != null">
        #{mockType,jdbcType=VARCHAR},
      </if>
      <if test="provider != null">
        #{provider,jdbcType=VARCHAR},
      </if>
      <if test="user != null">
        #{user,jdbcType=VARCHAR},
      </if>
      <if test="authMethod != null">
        #{authMethod,jdbcType=VARCHAR},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="mockData != null">
        #{mockData,jdbcType=LONGVARCHAR},
      </if>
      <if test="paramsDes != null">
        #{paramsDes,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update mock_setting
    <set>
      <if test="record.mockId != null">
        mock_id = #{record.mockId,jdbcType=VARCHAR},
      </if>
      <if test="record.mockName != null">
        mock_name = #{record.mockName,jdbcType=VARCHAR},
      </if>
      <if test="record.mockUrl != null">
        mock_url = #{record.mockUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.mockType != null">
        mock_type = #{record.mockType,jdbcType=VARCHAR},
      </if>
      <if test="record.provider != null">
        provider = #{record.provider,jdbcType=VARCHAR},
      </if>
      <if test="record.user != null">
        user = #{record.user,jdbcType=VARCHAR},
      </if>
      <if test="record.authMethod != null">
        auth_method = #{record.authMethod,jdbcType=VARCHAR},
      </if>
      <if test="record.note != null">
        note = #{record.note,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=VARCHAR},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.mockData != null">
        mock_data = #{record.mockData,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.paramsDes != null">
        params_des = #{record.paramsDes,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update mock_setting
    set mock_id = #{record.mockId,jdbcType=VARCHAR},
      mock_name = #{record.mockName,jdbcType=VARCHAR},
      mock_url = #{record.mockUrl,jdbcType=VARCHAR},
      mock_type = #{record.mockType,jdbcType=VARCHAR},
      provider = #{record.provider,jdbcType=VARCHAR},
      user = #{record.user,jdbcType=VARCHAR},
      auth_method = #{record.authMethod,jdbcType=VARCHAR},
      note = #{record.note,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=VARCHAR},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      mock_data = #{record.mockData,jdbcType=LONGVARCHAR},
      params_des = #{record.paramsDes,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update mock_setting
    set mock_id = #{record.mockId,jdbcType=VARCHAR},
      mock_name = #{record.mockName,jdbcType=VARCHAR},
      mock_url = #{record.mockUrl,jdbcType=VARCHAR},
      mock_type = #{record.mockType,jdbcType=VARCHAR},
      provider = #{record.provider,jdbcType=VARCHAR},
      user = #{record.user,jdbcType=VARCHAR},
      auth_method = #{record.authMethod,jdbcType=VARCHAR},
      note = #{record.note,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=VARCHAR},
      create_user = #{record.createUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lambo.mock.manage.model.MockSetting">
    update mock_setting
    <set>
      <if test="mockName != null">
        mock_name = #{mockName,jdbcType=VARCHAR},
      </if>
      <if test="mockUrl != null">
        mock_url = #{mockUrl,jdbcType=VARCHAR},
      </if>
      <if test="mockType != null">
        mock_type = #{mockType,jdbcType=VARCHAR},
      </if>
      <if test="provider != null">
        provider = #{provider,jdbcType=VARCHAR},
      </if>
      <if test="user != null">
        user = #{user,jdbcType=VARCHAR},
      </if>
      <if test="authMethod != null">
        auth_method = #{authMethod,jdbcType=VARCHAR},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=VARCHAR},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="mockData != null">
        mock_data = #{mockData,jdbcType=LONGVARCHAR},
      </if>
      <if test="paramsDes != null">
        params_des = #{paramsDes,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where mock_id = #{mockId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.lambo.mock.manage.model.MockSetting">
    update mock_setting
    set mock_name = #{mockName,jdbcType=VARCHAR},
      mock_url = #{mockUrl,jdbcType=VARCHAR},
      mock_type = #{mockType,jdbcType=VARCHAR},
      provider = #{provider,jdbcType=VARCHAR},
      user = #{user,jdbcType=VARCHAR},
      auth_method = #{authMethod,jdbcType=VARCHAR},
      note = #{note,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=VARCHAR},
      create_user = #{createUser,jdbcType=VARCHAR},
      mock_data = #{mockData,jdbcType=LONGVARCHAR},
      params_des = #{paramsDes,jdbcType=LONGVARCHAR}
    where mock_id = #{mockId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lambo.mock.manage.model.MockSetting">
    update mock_setting
    set mock_name = #{mockName,jdbcType=VARCHAR},
      mock_url = #{mockUrl,jdbcType=VARCHAR},
      mock_type = #{mockType,jdbcType=VARCHAR},
      provider = #{provider,jdbcType=VARCHAR},
      user = #{user,jdbcType=VARCHAR},
      auth_method = #{authMethod,jdbcType=VARCHAR},
      note = #{note,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=VARCHAR},
      create_user = #{createUser,jdbcType=VARCHAR}
    where mock_id = #{mockId,jdbcType=VARCHAR}
  </update>
</mapper>